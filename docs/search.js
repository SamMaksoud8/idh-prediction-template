window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src.idh", "modulename": "src.idh", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.config", "modulename": "src.idh.config", "kind": "module", "doc": "<p>Configuration dataclasses and helpers for the IDH prediction project.</p>\n"}, {"fullname": "src.idh.config.BigQueryConfig", "modulename": "src.idh.config", "qualname": "BigQueryConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.idh.config.BigQueryConfig.__init__", "modulename": "src.idh.config", "qualname": "BigQueryConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">features_dataset</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">patient_demographics</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">registration_data</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">real_time_machine_data</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sessionized_machine_data</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "src.idh.config.BigQueryConfig.features_dataset", "modulename": "src.idh.config", "qualname": "BigQueryConfig.features_dataset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.BigQueryConfig.patient_demographics", "modulename": "src.idh.config", "qualname": "BigQueryConfig.patient_demographics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.BigQueryConfig.registration_data", "modulename": "src.idh.config", "qualname": "BigQueryConfig.registration_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.BigQueryConfig.real_time_machine_data", "modulename": "src.idh.config", "qualname": "BigQueryConfig.real_time_machine_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.BigQueryConfig.sessionized_machine_data", "modulename": "src.idh.config", "qualname": "BigQueryConfig.sessionized_machine_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.StorageConfig", "modulename": "src.idh.config", "qualname": "StorageConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.idh.config.StorageConfig.__init__", "modulename": "src.idh.config", "qualname": "StorageConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">csv_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">parquet_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "src.idh.config.StorageConfig.bucket", "modulename": "src.idh.config", "qualname": "StorageConfig.bucket", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.StorageConfig.csv_prefix", "modulename": "src.idh.config", "qualname": "StorageConfig.csv_prefix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.StorageConfig.parquet_prefix", "modulename": "src.idh.config", "qualname": "StorageConfig.parquet_prefix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.ModelConfig", "modulename": "src.idh.config", "qualname": "ModelConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.idh.config.ModelConfig.__init__", "modulename": "src.idh.config", "qualname": "ModelConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">min_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">session_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">rolling_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">interval_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">prediction_intervals</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">idh_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">90.0</span>,</span><span class=\"param\">\t<span class=\"n\">docker_image_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">machine_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;n1-standard-4&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.idh.config.ModelConfig.name", "modulename": "src.idh.config", "qualname": "ModelConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.ModelConfig.endpoint_name", "modulename": "src.idh.config", "qualname": "ModelConfig.endpoint_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.ModelConfig.model_endpoint", "modulename": "src.idh.config", "qualname": "ModelConfig.model_endpoint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.ModelConfig.min_replicas", "modulename": "src.idh.config", "qualname": "ModelConfig.min_replicas", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "src.idh.config.ModelConfig.max_replicas", "modulename": "src.idh.config", "qualname": "ModelConfig.max_replicas", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "src.idh.config.ModelConfig.session_window", "modulename": "src.idh.config", "qualname": "ModelConfig.session_window", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "12"}, {"fullname": "src.idh.config.ModelConfig.rolling_window", "modulename": "src.idh.config", "qualname": "ModelConfig.rolling_window", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "src.idh.config.ModelConfig.interval_time", "modulename": "src.idh.config", "qualname": "ModelConfig.interval_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "15"}, {"fullname": "src.idh.config.ModelConfig.prediction_intervals", "modulename": "src.idh.config", "qualname": "ModelConfig.prediction_intervals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "src.idh.config.ModelConfig.idh_threshold", "modulename": "src.idh.config", "qualname": "ModelConfig.idh_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "90.0"}, {"fullname": "src.idh.config.ModelConfig.docker_image_uri", "modulename": "src.idh.config", "qualname": "ModelConfig.docker_image_uri", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.ModelConfig.machine_type", "modulename": "src.idh.config", "qualname": "ModelConfig.machine_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;n1-standard-4&#x27;"}, {"fullname": "src.idh.config.ModelConfig.features", "modulename": "src.idh.config", "qualname": "ModelConfig.features", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.idh.config.AppConfig", "modulename": "src.idh.config", "qualname": "AppConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.idh.config.AppConfig.__init__", "modulename": "src.idh.config", "qualname": "AppConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">BigQuery</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">idh</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">BigQueryConfig</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">storage</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">idh</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">StorageConfig</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">idh</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.idh.config.AppConfig.project_name", "modulename": "src.idh.config", "qualname": "AppConfig.project_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.AppConfig.region", "modulename": "src.idh.config", "qualname": "AppConfig.region", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.AppConfig.dataset_name", "modulename": "src.idh.config", "qualname": "AppConfig.dataset_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "src.idh.config.AppConfig.BigQuery", "modulename": "src.idh.config", "qualname": "AppConfig.BigQuery", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.idh.config.BigQueryConfig"}, {"fullname": "src.idh.config.AppConfig.storage", "modulename": "src.idh.config", "qualname": "AppConfig.storage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.idh.config.StorageConfig"}, {"fullname": "src.idh.config.AppConfig.model", "modulename": "src.idh.config", "qualname": "AppConfig.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.idh.config.ModelConfig"}, {"fullname": "src.idh.config.AppConfig.from_dict", "modulename": "src.idh.config", "qualname": "AppConfig.from_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">idh</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">AppConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.config.load_config", "modulename": "src.idh.config", "qualname": "load_config", "kind": "function", "doc": "<p>Load configuration from YAML and optional .env overrides.</p>\n\n<ul>\n<li>Loads .env FIRST so env vars are available.</li>\n<li>Expands ${VAR} and ${VAR:-default} in the YAML text before parsing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">env_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">idh</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">AppConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.config.config", "modulename": "src.idh.config", "qualname": "config", "kind": "variable", "doc": "<p></p>\n", "default_value": "AppConfig(project_name=&#x27;idh-prediction&#x27;, region=&#x27;us-central1&#x27;, dataset_name=&#x27;raw_data&#x27;, BigQuery=BigQueryConfig(features_dataset=&#x27;training_features&#x27;, patient_demographics=&#x27;patient-demographics&#x27;, registration_data=&#x27;registration-data&#x27;, real_time_machine_data=&#x27;real-time-machine-data&#x27;, sessionized_machine_data=&#x27;sessionized-machine-data&#x27;), storage=StorageConfig(bucket=None, csv_prefix=&#x27;raw-data-csv&#x27;, parquet_prefix=&#x27;raw-data-parquet&#x27;), model=ModelConfig(name=&#x27;idh-xgboost-model&#x27;, endpoint_name=&#x27;idh-endpoint&#x27;, model_endpoint=&#x27;4764112414897602560&#x27;, min_replicas=1, max_replicas=3, session_window=12, rolling_window=3, interval_time=15, prediction_intervals=5, idh_threshold=90.0, docker_image_uri=&#x27;us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.2-1:latest&#x27;, machine_type=&#x27;n1-standard-4&#x27;, features=[&#x27;age_at_session&#x27;, &#x27;dialysis_vintage_years&#x27;, &#x27;fluid_to_remove&#x27;, &#x27;minutes_into_session&#x27;, &#x27;gender&#x27;, &#x27;DM&#x27;, &#x27;avg_sbp&#x27;, &#x27;min_sbp&#x27;, &#x27;stddev_sbp&#x27;, &#x27;avg_dbp&#x27;, &#x27;avg_dia_temp&#x27;, &#x27;avg_conductivity&#x27;, &#x27;avg_uf_rate&#x27;, &#x27;avg_blood_flow&#x27;, &#x27;lag_1_avg_sbp&#x27;, &#x27;trend_1_sbp&#x27;, &#x27;lag_1_avg_uf_rate&#x27;, &#x27;trend_1_conductivity&#x27;, &#x27;rolling_avg_sbp&#x27;, &#x27;rolling_max_sbp&#x27;, &#x27;rolling_stddev_sbp&#x27;]))"}, {"fullname": "src.idh.gcp", "modulename": "src.idh.gcp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery", "modulename": "src.idh.gcp.bigquery", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.query", "modulename": "src.idh.gcp.bigquery.query", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.query.run_query", "modulename": "src.idh.gcp.bigquery.query", "qualname": "run_query", "kind": "function", "doc": "<p>Execute a BigQuery SQL query and optionally wait for completion.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    An initialized BigQuery client.\nsql : str\n    The SQL statement to execute.\nwait : bool, optional\n    If True (default), block until the query job completes.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob object representing the launched query. If <code>wait</code> is True,\n    the returned job has finished.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>google.cloud.exceptions.GoogleCloudError\n    Propagates errors raised by the BigQuery client when submitting or running the job.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">wait</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.export_model_to_gcs", "modulename": "src.idh.gcp.bigquery.query", "qualname": "export_model_to_gcs", "kind": "function", "doc": "<p>Export a BigQuery ML model to a Google Cloud Storage bucket.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    An initialized BigQuery client.\nproject_id : str\n    GCP project ID containing the model.\ndataset_name : str\n    BigQuery dataset containing the model.\nmodel_name : str\n    Name of the BigQuery ML model to export.\nbucket : str\n    Destination GCS bucket name (without the \"gs://\" prefix). The model\n    artifacts will be exported to gs://{bucket}/model-artifacts/.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob object for the EXPORT MODEL statement. The job may still\n    be running when returned (consistent with run_query behavior).</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>google.cloud.exceptions.GoogleCloudError\n    Propagates errors from the BigQuery client when submitting the export job.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.export_model_to_gcs_from_config", "modulename": "src.idh.gcp.bigquery.query", "qualname": "export_model_to_gcs_from_config", "kind": "function", "doc": "<p>Export the model specified in the project config to a Google Cloud Storage bucket.</p>\n\n<p>This convenience wrapper reads project, dataset, model and bucket settings from\nthe global <code>config</code> and calls export_model_to_gcs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client | None, optional\n    Optional BigQuery client. If None, a client is created using\n    config.project_name.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the EXPORT MODEL statement. The job may still be running\n    when returned.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.features_engineering", "modulename": "src.idh.gcp.bigquery.query", "qualname": "features_engineering", "kind": "function", "doc": "<p>Create or replace a BigQuery table with engineered features for model training.</p>\n\n<p>The function builds a multi-step SQL pipeline that:</p>\n\n<ul>\n<li>Normalizes and timestamps sessionized machine data</li>\n<li>Joins registration and demographic information</li>\n<li>Bins measurements into fixed time intervals</li>\n<li>Computes static/session-level features</li>\n<li>Computes lag, trend, rolling-window statistics and a future hypotension target label</li>\n<li>Splits rows into TRAIN/TEST by a stable hash of session_id</li>\n</ul>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    Initialized BigQuery client used to run the CREATE OR REPLACE TABLE statement.\nfeatures_table : str\n    Fully-qualified destination table name (project.dataset.table) for engineered features.\nregistration_data_table : str\n    Fully-qualified BigQuery table containing registration data.\npatient_demographics_table : str\n    Fully-qualified BigQuery table containing patient demographics.\nsessionized_machine_data_table : str\n    Fully-qualified source table containing sessionized machine data.\ninterval_window : int\n    Time bin size in minutes (e.g. 15 for 15-minute bins).\nrolling_window : int\n    Number of preceding rows to include for rolling-window calculations.\nprediction_intervals : int\n    Number of following intervals to inspect when computing the hypotension target.\nidh_threshold : float\n    Systolic BP threshold to flag hypotension events.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the CREATE OR REPLACE TABLE statement. The job may still be running\n    depending on run_query's wait behavior.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>google.cloud.exceptions.GoogleCloudError\n    Propagates errors raised by the BigQuery client when submitting or running the job.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">features_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">registration_data_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">patient_demographics_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sessionized_machine_data_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">interval_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">rolling_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">prediction_intervals</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">idh_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.features_engineering_from_config", "modulename": "src.idh.gcp.bigquery.query", "qualname": "features_engineering_from_config", "kind": "function", "doc": "<p>Create or replace the features table using project configuration.</p>\n\n<p>This convenience wrapper reads project, dataset and model settings from the global\n<code>config</code>, constructs fully-qualified table names, creates a BigQuery client if\nnone is provided, and calls <code>features_engineering</code> to build the features table.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client | None, optional\n    Optional BigQuery client. If None, a client is created using config.project_name.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the CREATE OR REPLACE TABLE statement. The job may still be running.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.evaluate_model", "modulename": "src.idh.gcp.bigquery.query", "qualname": "evaluate_model", "kind": "function", "doc": "<p>Evaluate a BigQuery ML model using ML.EVALUATE.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    Initialized BigQuery client.\nproject_id : str\n    GCP project ID containing the model.\ndataset_id : str\n    BigQuery dataset containing the model.\nmodel_name : str\n    Name of the BigQuery ML model to evaluate.\nwait : bool, optional\n    If True (default), wait for the query job to complete before returning.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the ML.EVALUATE call. If <code>wait</code> is True, the job has finished.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">wait</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.train_xgboost_model", "modulename": "src.idh.gcp.bigquery.query", "qualname": "train_xgboost_model", "kind": "function", "doc": "<p>Train a BigQuery ML XGBoost (BOOSTED_TREE_CLASSIFIER) model using a features table.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    Initialized BigQuery client.\nfeatures : list[str]\n    List of feature column names to use for training.\nproject_id : str\n    GCP project ID where the model will be created.\ndataset_id : str\n    BigQuery dataset ID where the model and features table reside.\nfeatures_name : str\n    Name of the features table containing preprocessed training features.\nmodel_name : str\n    Name to give the created BigQuery ML model.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the CREATE OR REPLACE MODEL statement (completed if run_query waits).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">features_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.get_session_machine_data", "modulename": "src.idh.gcp.bigquery.query", "qualname": "get_session_machine_data", "kind": "function", "doc": "<p>Retrieve sessionized machine data for a given session_id from BigQuery.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    Initialized BigQuery client.\nsession_id : str\n    The session identifier to filter records by.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.DataFrame | None\n    A DataFrame containing rows for the requested session ordered by datatime,\n    an empty DataFrame if the query returns no rows, or None if an error occurred.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Errors from the BigQuery client are caught and logged; this function returns\nNone on error instead of raising.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">session_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.sessionize_machine_data", "modulename": "src.idh.gcp.bigquery.query", "qualname": "sessionize_machine_data", "kind": "function", "doc": "<p>Create or replace a sessionized table in BigQuery by grouping records into sessions.</p>\n\n<p>A new session is started when the gap between consecutive records for the same pid\nis greater than <code>session_window</code> hours or when there is no prior record for the pid.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client\n    Initialized BigQuery client.\nsession_window : int\n    Session gap threshold in hours. Gaps greater than this start a new session.\ntable_name : str\n    Fully qualified source table name (project.dataset.table) to read raw records from.\nsessionized_table_name : str\n    Fully qualified destination table name (project.dataset.table) to create/replace.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the CREATE OR REPLACE TABLE statement (completed if run_query waits).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">session_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sessionized_table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.sessionize_machine_data_from_config", "modulename": "src.idh.gcp.bigquery.query", "qualname": "sessionize_machine_data_from_config", "kind": "function", "doc": "<p>Create or replace the sessionized machine data table using settings from the config.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client | None\n    Optional BigQuery client. If None, a client is created using config.project_name.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the CREATE OR REPLACE TABLE statement created by sessionize_machine_data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.run_model_evaluation_from_config", "modulename": "src.idh.gcp.bigquery.query", "qualname": "run_model_evaluation_from_config", "kind": "function", "doc": "<p>Evaluate the model specified in the project's config using ML.EVALUATE.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client | None\n    Optional BigQuery client. If None, a client is created using config.project_name.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the ML.EVALUATE call (completed if evaluate_model waits).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.query.run_model_training_from_config", "modulename": "src.idh.gcp.bigquery.query", "qualname": "run_model_training_from_config", "kind": "function", "doc": "<p>Train an XGBoost (BOOSTED_TREE_CLASSIFIER) model using settings from the project's config.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>client : google.cloud.bigquery.Client | None\n    Optional BigQuery client. If None, a client is created using config.project_name.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>google.cloud.bigquery.job.QueryJob\n    The QueryJob for the CREATE OR REPLACE MODEL statement (completed if run_query waits).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryJob</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.table_manager", "modulename": "src.idh.gcp.bigquery.table_manager", "kind": "module", "doc": "<p>Abstractions for creating and loading BigQuery tables from GCS.</p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager", "kind": "class", "doc": "<p>Manage creation and loading of a single BigQuery table.</p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.__init__", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">SchemaField</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">gs_bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gs_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.client", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.project_id", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.project_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.dataset_id", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.dataset_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.dataset_name", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.dataset_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.table_id", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.table_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.schema", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.schema", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.gs_uri", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.gs_uri", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.load_from_gs", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.load_from_gs", "kind": "function", "doc": "<p>Load table data from the configured GCS <code>.parquet</code> source.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.table_manager.BigQueryTableManager.create_table", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "BigQueryTableManager.create_table", "kind": "function", "doc": "<p>Create the BigQuery table described by this manager if it is missing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.table_manager.RealTimeMachineDataTable", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "RealTimeMachineDataTable", "kind": "class", "doc": "<p>Table manager for the <code>real-time-machine-data</code> table.</p>\n", "bases": "BigQueryTableManager"}, {"fullname": "src.idh.gcp.bigquery.table_manager.RealTimeMachineDataTable.__init__", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "RealTimeMachineDataTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;idh-prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw_data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;real-time-machine-data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gs_bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gs_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw-data-parquet/vip.parquet&#39;</span></span>)</span>"}, {"fullname": "src.idh.gcp.bigquery.table_manager.PatientDemographicsTable", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "PatientDemographicsTable", "kind": "class", "doc": "<p>Table manager for the <code>patient-demographics</code> table.</p>\n", "bases": "BigQueryTableManager"}, {"fullname": "src.idh.gcp.bigquery.table_manager.PatientDemographicsTable.__init__", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "PatientDemographicsTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;idh-prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw_data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;patient-demographics&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gs_bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gs_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw-data-parquet&#39;</span></span>)</span>"}, {"fullname": "src.idh.gcp.bigquery.table_manager.RegistrationDataTable", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "RegistrationDataTable", "kind": "class", "doc": "<p>Table manager for the <code>registration-data</code> table.</p>\n", "bases": "BigQueryTableManager"}, {"fullname": "src.idh.gcp.bigquery.table_manager.RegistrationDataTable.__init__", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "RegistrationDataTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;idh-prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw_data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;registration-data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gs_bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gs_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw-data-parquet/d1.parquet&#39;</span></span>)</span>"}, {"fullname": "src.idh.gcp.bigquery.table_manager.TABLES", "modulename": "src.idh.gcp.bigquery.table_manager", "qualname": "TABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;src.idh.gcp.bigquery.table_manager.RealTimeMachineDataTable&#x27;&gt;, &lt;class &#x27;src.idh.gcp.bigquery.table_manager.PatientDemographicsTable&#x27;&gt;, &lt;class &#x27;src.idh.gcp.bigquery.table_manager.RegistrationDataTable&#x27;&gt;]"}, {"fullname": "src.idh.gcp.bigquery.tables", "modulename": "src.idh.gcp.bigquery.tables", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.gcp.bigquery.tables.features_table_id", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "features_table_id", "kind": "function", "doc": "<p>Get the fully-qualified table ID for the features table.</p>\n\n<p>Returns:\n    Fully-qualified table id in the form \"project.dataset.table\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.sessionized_machine_data_table_id", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "sessionized_machine_data_table_id", "kind": "function", "doc": "<p>Get the fully-qualified table ID for the sessionized machine data table.</p>\n\n<p>Returns:\n    Fully-qualified table id in the form \"project.dataset.table\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.real_time_machine_data_table_id", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "real_time_machine_data_table_id", "kind": "function", "doc": "<p>Get the fully-qualified table ID for the real-time machine data table.</p>\n\n<p>Returns:\n    Fully-qualified table id in the form \"project.dataset.table\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.registration_data_table_id", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "registration_data_table_id", "kind": "function", "doc": "<p>Get the fully-qualified table ID for the registration data table.</p>\n\n<p>Returns:\n    Fully-qualified table id in the form \"project.dataset.table\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.patient_demographics_table_id", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "patient_demographics_table_id", "kind": "function", "doc": "<p>Get the fully-qualified table ID for the patient demographics table.</p>\n\n<p>Returns:\n    Fully-qualified table id in the form \"project.dataset.table\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.check_table_ready", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "check_table_ready", "kind": "function", "doc": "<p>Checks for the existence and accessibility of a BigQuery table with\na retry mechanism (exponential backoff) to account for eventual consistency.</p>\n\n<p>Args:\n    client: The initialized BigQuery client.\n    table_id: The full ID of the table (e.g., 'project.dataset.table').\n    max_retries: The maximum number of times to retry the check.</p>\n\n<p>Returns:\n    True if the table is successfully accessed, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">table_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">max_retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.load_table_from_bigquery", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "load_table_from_bigquery", "kind": "function", "doc": "<p>Loads a full BigQuery table into a pandas DataFrame.</p>\n\n<p>Args:\n    client: BigQuery client (e.g. google.cloud.bigquery.Client).\n    table_id: Fully-qualified table id: project.dataset.table</p>\n\n<p>Returns:\n    pd.DataFrame: Loaded table (empty DataFrame on error).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">table_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.get_table_id", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "get_table_id", "kind": "function", "doc": "<p>Build a fully-qualified BigQuery table identifier.</p>\n\n<p>Args:\n    table_name: Table name (without dataset/project).</p>\n\n<p>Returns:\n    Fully-qualified table id in the form \"project.dataset.table\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.load_real_time_machine_data", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "load_real_time_machine_data", "kind": "function", "doc": "<p>Load the real-time machine data table from BigQuery.</p>\n\n<p>Args:\n    client: BigQuery client (google.cloud.bigquery.Client).</p>\n\n<p>Returns:\n    pd.DataFrame: Loaded table as a pandas DataFrame. Returns an empty\n    DataFrame on error.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.load_registration_data", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "load_registration_data", "kind": "function", "doc": "<p>Load the registration_data table from BigQuery.</p>\n\n<p>Args:\n    client: BigQuery client (google.cloud.bigquery.Client).</p>\n\n<p>Returns:\n    pd.DataFrame: Loaded table as a pandas DataFrame. Returns an empty\n    DataFrame on error.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.load_patient_demographics", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "load_patient_demographics", "kind": "function", "doc": "<p>Load the patient_demographics table from BigQuery.</p>\n\n<p>Args:\n    client: BigQuery client (google.cloud.bigquery.Client).</p>\n\n<p>Returns:\n    pd.DataFrame: Loaded table as a pandas DataFrame. Returns an empty\n    DataFrame on error.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.bigquery.tables.load_sessionized_machine_data", "modulename": "src.idh.gcp.bigquery.tables", "qualname": "load_sessionized_machine_data", "kind": "function", "doc": "<p>Load the sessionized_machine_data table from BigQuery.</p>\n\n<p>Args:\n    client: BigQuery client (google.cloud.bigquery.Client).</p>\n\n<p>Returns:\n    pd.DataFrame: Loaded table as a pandas DataFrame. Returns an empty\n    DataFrame on error.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.setup", "modulename": "src.idh.gcp.setup", "kind": "module", "doc": "<p>Convenience functions for provisioning data infrastructure in GCP.</p>\n"}, {"fullname": "src.idh.gcp.setup.create_bigquery_dataset", "modulename": "src.idh.gcp.setup", "qualname": "create_bigquery_dataset", "kind": "function", "doc": "<p>Create a dataset in BigQuery if it does not already exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.setup.convert_csv_to_parquet", "modulename": "src.idh.gcp.setup", "qualname": "convert_csv_to_parquet", "kind": "function", "doc": "<p>Convert each raw CSV dataset to Parquet using the registered schemas.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.setup.create_table", "modulename": "src.idh.gcp.setup", "qualname": "create_table", "kind": "function", "doc": "<p>Create and load a table managed by <code>table_cls</code> from Parquet sources.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">table_cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">idh</span><span class=\"o\">.</span><span class=\"n\">gcp</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">table_manager</span><span class=\"o\">.</span><span class=\"n\">BigQueryTableManager</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.setup.create_data_tables_from_parquet", "modulename": "src.idh.gcp.setup", "qualname": "create_data_tables_from_parquet", "kind": "function", "doc": "<p>Create raw data tables in BigQuery from Parquet files stored in GCS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.gcp.setup.load_csv_data_in_gcs", "modulename": "src.idh.gcp.setup", "qualname": "load_csv_data_in_gcs", "kind": "function", "doc": "<p>Download raw CSV files and upload them to <code>gs://bucket/prefix</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bucket</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;raw-data-csv&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model", "modulename": "src.idh.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.model.MODEL_FEATURES", "modulename": "src.idh.model", "qualname": "MODEL_FEATURES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;DM&#x27;, &#x27;age_at_session&#x27;, &#x27;avg_blood_flow&#x27;, &#x27;avg_conductivity&#x27;, &#x27;avg_dbp&#x27;, &#x27;avg_dia_temp&#x27;, &#x27;avg_sbp&#x27;, &#x27;avg_uf_rate&#x27;, &#x27;dialysis_vintage_years&#x27;, &#x27;fluid_to_remove&#x27;, &#x27;gender&#x27;, &#x27;lag_1_avg_sbp&#x27;, &#x27;lag_1_avg_uf_rate&#x27;, &#x27;min_sbp&#x27;, &#x27;minutes_into_session&#x27;, &#x27;rolling_avg_sbp&#x27;, &#x27;rolling_max_sbp&#x27;, &#x27;rolling_stddev_sbp&#x27;, &#x27;stddev_sbp&#x27;, &#x27;trend_1_conductivity&#x27;, &#x27;trend_1_sbp&#x27;]"}, {"fullname": "src.idh.model.endpoint", "modulename": "src.idh.model.endpoint", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.model.endpoint.check_endpoint_deployed", "modulename": "src.idh.model.endpoint", "qualname": "check_endpoint_deployed", "kind": "function", "doc": "<p>Return True if the endpoint has deployed models, else False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">aiplatform</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Endpoint</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.endpoint.create_vertex_endpoint", "modulename": "src.idh.model.endpoint", "qualname": "create_vertex_endpoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">aiplatform</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Endpoint</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.endpoint.deploy_vertex_model", "modulename": "src.idh.model.endpoint", "qualname": "deploy_vertex_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">aiplatform</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Endpoint</span>,</span><span class=\"param\">\t<span class=\"n\">env_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.env&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">machine_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;n1-standard-2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">min_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.endpoint.deploy_model_from_config", "modulename": "src.idh.model.endpoint", "qualname": "deploy_model_from_config", "kind": "function", "doc": "<p>Deploys a model to Vertex AI using configuration from the global config object.\nArgs:\n    env_file_path (str): Path to the .env file where the endpoint ID will be saved.\n        Defaults to \".env\".\nReturns:\n    aiplatform.Endpoint: The deployed Vertex AI Endpoint object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">endpoint</span>, </span><span class=\"param\"><span class=\"n\">env_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.env&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.endpoint.get_endpoint", "modulename": "src.idh.model.endpoint", "qualname": "get_endpoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">endpoint_display_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.endpoint.get_endpoint_id", "modulename": "src.idh.model.endpoint", "qualname": "get_endpoint_id", "kind": "function", "doc": "<p>Find the full Vertex AI Endpoint resource name for a given display name.\nInitializes the Vertex AI SDK for the provided project and location, lists\nall endpoints in that location, and returns the full resource name of the\nfirst endpoint whose display_name matches endpoint_display_name.\nArgs:\n    project_id (str): Google Cloud project ID used to initialize the Vertex AI client.\n    location (str): Google Cloud location/region (for example, \"us-central1\").\n    endpoint_display_name (str): The display name of the endpoint to search for.\nReturns:\n    str | None: The full endpoint resource name (for example,\n        \"projects/{project}/locations/{location}/endpoints/{endpoint_id}\") if a\n        matching endpoint is found; otherwise None.\nRaises:\n    Exception: Propagates exceptions raised by the Vertex AI SDK (for example,\n        failures during client initialization or when listing endpoints). Callers\n        may catch more specific SDK exceptions as needed.\nExample:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>get_endpoint_id(\"my-project\", \"us-central1\", \"my-endpoint\")\n          \"projects/my-project/locations/us-central1/endpoints/1234567890\"</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">endpoint_display_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.endpoint.get_endpoint_id_from_config", "modulename": "src.idh.model.endpoint", "qualname": "get_endpoint_id_from_config", "kind": "function", "doc": "<p>Resolve the AI Platform endpoint ID from the current configuration.</p>\n\n<p>If <code>config.model.endpoint</code> is set, that value is returned directly.\nOtherwise this function attempts to construct an endpoint identifier by calling\n<code>get_endpoint_id()</code> with the configured project, region, and model endpoint\ndisplay name:</p>\n\n<pre><code>project_id = config.project_name\nlocation = config.region\nendpoint_display_name = config.model.endpoint_name\n</code></pre>\n\n<p>Returns:\n    str | None: The resolved endpoint ID, or None if an endpoint could not be\n    determined (for example, if required configuration values are missing or\n    <code>get_endpoint_id()</code> returns None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.predict", "modulename": "src.idh.model.predict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.idh.model.predict.prepare_payload_for_inference", "modulename": "src.idh.model.predict", "qualname": "prepare_payload_for_inference", "kind": "function", "doc": "<p>Prepare payload for Vertex AI inference.</p>\n\n<p>The expected payload structure is:\n    {\n        \"instances\": [...],    # optional list of instances\n        \"parameters\": {...}    # optional dict of parameters\n    }</p>\n\n<p>Args:\n    payload: A mapping that may contain \"instances\" and \"parameters\".</p>\n\n<p>Returns:\n    A tuple (instances, parameters) where instances is a list (defaults to [])\n    and parameters is a dict (defaults to {}).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.predict.predict", "modulename": "src.idh.model.predict", "qualname": "predict", "kind": "function", "doc": "<p>Perform a prediction request against a Vertex AI endpoint.</p>\n\n<p>Args:\n    project_id: GCP project id.\n    region: GCP region (location).\n    endpoint_id: Vertex AI endpoint identifier.\n    instances: A list of instances to be sent for prediction.\n    parameters: Optional dictionary of prediction parameters.</p>\n\n<p>Returns:\n    The raw response object returned by the Vertex AI endpoint.predict call.</p>\n\n<p>Raises:\n    Any exception propagated from the Google Cloud AI Platform client when the\n    prediction request fails.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">instances</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.idh.model.predict.predict_from_config", "modulename": "src.idh.model.predict", "qualname": "predict_from_config", "kind": "function", "doc": "<p>Perform a prediction using project/region/endpoint values from the config.</p>\n\n<p>Args:\n    instances: A list of instances to send for prediction.\n    parameters: Optional dict of prediction parameters.</p>\n\n<p>Returns:\n    The raw response object returned by predict().</p>\n\n<p>Raises:\n    Any exception raised by get_endpoint_id_from_config or predict is propagated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instances</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();